"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
// This file was generated by a tool. Modifying this file will produce unexpected behavior.
//
// This script is used to install and invoke a tool from a CI definition.
const childProcess = require("child_process");
const install_run_common_1 = require("./install-run-common");
/**
 * Parse a package specifier (in the form of name\@version) into name and version parts.
 */
function parsePackageSpecifier(rawPackageSpecifier) {
    rawPackageSpecifier = (rawPackageSpecifier || '').trim();
    const separatorIndex = rawPackageSpecifier.lastIndexOf('@');
    let name;
    let version = undefined;
    if (separatorIndex === 0) {
        // The specifier starts with a scope and doesn't have a version specified
        name = rawPackageSpecifier;
    }
    else if (separatorIndex === -1) {
        // The specifier doesn't have a version
        name = rawPackageSpecifier;
    }
    else {
        name = rawPackageSpecifier.substring(0, separatorIndex);
        version = rawPackageSpecifier.substring(separatorIndex + 1);
    }
    if (!name) {
        throw new Error(`Invalid package specifier: ${rawPackageSpecifier}`);
    }
    return { name, version };
}
/**
 * Resolve a package specifier to a static version
 */
function resolvePackageVersion({ name, version }) {
    if (!version) {
        version = '*'; // If no version is specified, use the latest version
    }
    if (version.match(/[\*\^\~]/ig)) {
        // If the version contains the characters "*", "^", or "~", we need to figure out what the
        // version resolves to
        try {
            const npmPath = install_run_common_1.getNpmPath();
            // This returns something that looks like:
            //  @microsoft/rush@3.0.0 '3.0.0'
            //  @microsoft/rush@3.0.1 '3.0.1'
            //  ...
            //  @microsoft/rush@3.0.20 '3.0.20'
            //  <blank line>
            const npmViewVersionOutput = childProcess.execSync(`${npmPath} view ${name}@${version} version --no-update-notifier`, { stdio: [] }).toString();
            const versionLines = npmViewVersionOutput.split('\n').filter((line) => !!line);
            const latestVersion = versionLines[versionLines.length - 1];
            if (!latestVersion) {
                throw new Error('No versions found for the specified version range.');
            }
            const versionMatches = latestVersion.match(/^.+\s\'(.+)\'$/);
            if (!versionMatches) {
                throw new Error(`Invalid npm output ${latestVersion}`);
            }
            return versionMatches[1];
        }
        catch (e) {
            throw new Error(`Unable to resolve version ${version} of package ${name}: ${e}`);
        }
    }
    else {
        return version;
    }
}
function run() {
    install_run_common_1.runWithErrorPrinting(() => {
        // tslint:disable-next-line:no-unused-variable
        const [nodePath, scriptPath, rawPackageSpecifier, packageBinName, ...packageBinArgs] = process.argv;
        const packageSpecifier = parsePackageSpecifier(rawPackageSpecifier);
        const name = packageSpecifier.name;
        const version = resolvePackageVersion(packageSpecifier);
        if (packageSpecifier.version !== version) {
            console.log(`Resolved to ${name}@${version}`);
        }
        install_run_common_1.installAndRun(nodePath, name, version, packageBinName, packageBinArgs);
    });
}
run();

//# sourceMappingURL=install-run.js.map
